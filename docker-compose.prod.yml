# Production docker-compose.yml for CryptoScalp AI
version: '3.8'

services:
  # Main application service
  cryptoscalp-app:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: production
    container_name: cryptoscalp-app
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    ports:
      - "8000:8000"
      - "8501:8501"  # Streamlit dashboard
    environment:
      - PYTHONPATH=/app/src
      - CRYPTOSCALP_ENV=production
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://cryptoscalp:${DB_PASSWORD:-prodpassword}@cryptoscalp-db:5432/cryptoscalp_prod
      - REDIS_URL=redis://cryptoscalp-redis:6379/0
      - CLICKHOUSE_URL=clickhouse://cryptoscalp-clickhouse:9000/cryptoscalp_prod
      - RABBITMQ_URL=amqp://cryptoscalp:${RABBITMQ_PASSWORD:-prodpassword}@cryptoscalp-rabbitmq:5672/
    depends_on:
      - cryptoscalp-db
      - cryptoscalp-redis
      - cryptoscalp-clickhouse
      - cryptoscalp-rabbitmq
    networks:
      - cryptoscalp-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/readiness"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL database for trading data
  cryptoscalp-db:
    image: postgres:15-alpine
    container_name: cryptoscalp-db
    environment:
      - POSTGRES_DB=cryptoscalp_prod
      - POSTGRES_USER=cryptoscalp
      - POSTGRES_PASSWORD=${DB_PASSWORD:-prodpassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - cryptoscalp-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    command: >
      postgres 
      -c 'max_connections=200' 
      -c 'shared_buffers=512MB' 
      -c 'effective_cache_size=2GB' 
      -c 'work_mem=8MB' 
      -c 'maintenance_work_mem=128MB' 
      -c 'checkpoint_completion_target=0.9' 
      -c 'wal_buffers=32MB' 
      -c 'default_statistics_target=100' 
      -c 'random_page_cost=1.1' 
      -c 'effective_io_concurrency=200' 
      -c 'wal_level=replica' 
      -c 'max_wal_size=2GB' 
      -c 'min_wal_size=160MB'
      -c 'log_min_duration_statement=1000'
      -c 'log_statement=none'
      -c 'log_connections=on'
      -c 'log_disconnections=on'

  # Redis with DragonflyDB for high-performance caching
  cryptoscalp-redis:
    image: docker.dragonflydb.io/dragonflydb/dragonfly
    container_name: cryptoscalp-redis
    command: 
      - "--logtostderr"
      - "--maxmemory=1gb"
      - "--maxmemory-policy=allkeys-lru"
      - "--hz=100"
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cryptoscalp-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    sysctls:
      - net.core.somaxconn=65535

  # ClickHouse for time-series analytics
  cryptoscalp-clickhouse:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: cryptoscalp-clickhouse
    environment:
      - CLICKHOUSE_DB=cryptoscalp_prod
      - CLICKHOUSE_USER=cryptoscalp
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD:-prodpassword}
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./clickhouse-config.xml:/etc/clickhouse-server/config.d/config.xml
    ports:
      - "9000:9000"
      - "8123:8123"
    networks:
      - cryptoscalp-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  # RabbitMQ for message queuing
  cryptoscalp-rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: cryptoscalp-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=cryptoscalp
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-prodpassword}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - cryptoscalp-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: cryptoscalp-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - cryptoscalp-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: cryptoscalp-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - cryptoscalp-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Nginx as reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: cryptoscalp-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - cryptoscalp-app
    networks:
      - cryptoscalp-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  clickhouse_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  cryptoscalp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16